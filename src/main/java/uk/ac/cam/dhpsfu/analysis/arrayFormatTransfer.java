package uk.ac.cam.dhpsfu.analysis;

import java.util.Random;

public class arrayFormatTransfer {
    public static void main(String[] args) {
        // Define the size of the 2D array
        int rows = 12;
        int columns = 29;

        // Generate the random 2D array
//        int[][] randomArray = generateRandom2DArray(rows, columns);
//
//        // Print the array in Python array format
//        printPythonArray(randomArray);
//        System.out.println();
//        printJavaArrayA(randomArray);
        String test = "[[ -452180014  1797463301 -1608924245 -2036843798  2029062600 -1986243586\n" +
                "    692214511   306951981]\n" +
                " [ 1372256148  -643314804  1765753283  -245089267   267065219   248958589\n" +
                "     -8508224 -1203512869]\n" +
                " [ 2062371702 -2009719963  -663278016  -401476011  2090638732 -2052980457\n" +
                "    814367177  -468453611]\n" +
                " [ 1082906509 -2124077112  1803455204  1522235545  -952145419  1150919348\n" +
                "   2098125113  1996100329]\n" +
                " [-1127956021 -1458466025  1941657221 -1146736359   996418127  -841333635\n" +
                "  -1436985463   -28593440]\n" +
                " [  922824646  -554477882  -462852314  2035766041   745298877  -513881224\n" +
                "  -1544853229   461747974]\n" +
                " [ 1505817352   340047517 -1230950173 -2077857764  -462091682 -1985742517\n" +
                "   1844082041    -9440018]]";
        String test1 = "[[  601143032 -1313564073  1943312355  1314372232   654654964 -1808946068\n" +
                "   1380185376  -134840368  1999484302 -1760024850 -1642958493  -724554148\n" +
                "   1274418676  -276589311 -2045605871 -1608940649 -1990729989  1324433759\n" +
                "   2097286185  1313550644  -194304652  -662464940  -500823681   667098734\n" +
                "   1300063299 -1545990258  2104877399  2147309369  1388817503]\n" +
                " [-1318772735  -159044292  1188435404   387166742  -626261206  -660063553\n" +
                "  -1249262349  1853978580  -492909040   983936810  -704757905  -157613168\n" +
                "   1917017709    18249899 -1928195218  1007275628  2049853734      279615\n" +
                "  -1843310036 -1616076904 -1676038935 -1131753069   582412734   286247515\n" +
                "  -2053357567  2083332199 -1532138029   594355669 -1343164770]\n" +
                " [ 2039942168 -1642543928   422701774  -988938108  1191460308   886068908\n" +
                "    222398865  1848592591  1602087476  1854902514  -143596513 -1186980338\n" +
                "   2106409764 -2133947438   151138710  1729577152   668160487 -1053865121\n" +
                "   -982167815  -658196659 -1696305479 -2094495960  1852941732  -794749047\n" +
                "   -635669869  1172186818  -845127261   860426593   152595391]\n" +
                " [ -377388779  1112506525 -1039979890  2098921382  2099473254  2054337736\n" +
                "    755214952 -1425633815   530380230   268259474  -921730227 -2141974100\n" +
                "   1495026126  1348444285  -814740007  2052457823   909084552 -1089376555\n" +
                "  -1627237761  1302992874  1697631704 -2120963619  2084312294   536251786\n" +
                "   1320838130   143997544   271803625    55561650 -1893345238]\n" +
                " [  348089519  2004329847 -1796144674   742277751  -697092131   956088285\n" +
                "   -299916572    96143349 -1497992910   258713908 -1388005789   387284452\n" +
                "  -1309225407 -1779274067 -1287705361  1251699444   951909571 -1461967726\n" +
                "   -178705203  -672723360   241185379   -75860516   173277329  1724557763\n" +
                "    211658720 -1036087526 -1507734856   342294002  1032579884]\n" +
                " [    9630796  -558023024  1304594745  1862335108   -27090837 -1992639548\n" +
                "  -1357233261  1436554568   971682483  1074832442   323636415 -1325942603\n" +
                "    285207665  1065215019   302706831   260202189  1153547925 -1346080965\n" +
                "   1545335940  1827581449   956419042  -140834370 -1567698530  -602633082\n" +
                "  -1296742018 -1844410012 -1188003321    42079691 -2028206322]\n" +
                " [ 1462075763   541769896  2006626829  -850593196 -1307704057  -806175160\n" +
                "   1234020872  1915609960  -503297951   836199763   581564980  -292088806\n" +
                "  -2121112523   887351205  1954831722  1815781558 -1777907134  -899176762\n" +
                "  -1410510206 -1138597205   145030320   556049948 -1939102269  -729101689\n" +
                "  -1226405578 -2126809518  1146339456 -1860694065 -1759914334]\n" +
                " [ 1697430379  -464833133  1279580611   286009633   188032332   193928445\n" +
                "     20992964   -82216512  -427269630  -166830711 -1396459109 -1718423171\n" +
                "   1532920370 -1132935816    54415979 -1578889882 -1816367251   179800901\n" +
                "   1420868317   -38907665 -1724570308  -272738070 -1568966075  -801235679\n" +
                "    883578994  -129519936  2035657565   503859097  -474167278]\n" +
                " [ 1636497208 -1167087128 -1725944085  -437047299 -1060503590 -1233303286\n" +
                "    106191917 -1238344457  1570070715  1922993188 -1547899028 -1319188683\n" +
                "    930018806   169714964   839765634  1610490597  1057715595 -1378319604\n" +
                "   1603936922  -555081123   749472516    36198783  1436079814  1293731377\n" +
                "     -9686680  -102518473  1824799446 -1110748179  1976712211]\n" +
                " [   -5533993  -375320332  1257308676  1381048512  1801351595   497369542\n" +
                "    489606910  1334731722 -1957529985  -669566977 -1791402765 -1558143760\n" +
                "    817696250   376238580  -963005072 -1136843508   894502548 -1532215014\n" +
                "  -1150046302  1696953595 -1530741694  1737898102   632239327   -97292305\n" +
                "  -2121276860 -1250094000 -1025586290 -2048304190 -1496768599]\n" +
                " [ 1347062586 -1249125438  1267798467 -1788774869  -139371537  1495365852\n" +
                "   1518669469  1325253739  -907465846 -1204335306  1136396940 -1144170455\n" +
                "   -208622080 -1046913401  1671950249  -604773001  -925880098 -1633880411\n" +
                "  -1882282969  -587519439   726114155     6695765  -911779649  1501465910\n" +
                "    494940933  -725160357    85102926 -1551782188  -226482668]\n" +
                " [ 1072925289   625872086   343411867   -44536034  -199280338 -1203632211\n" +
                "   1823371738 -1431808697   950721761  1392778102  -572511312  1430301472\n" +
                "    394683245  -712355512 -1472928444 -1847515186 -1466293954   669147430\n" +
                "   1812845108   318376959  -313627775 -1837164084 -1216671497 -1036156675\n" +
                "   1513310948   165648285   898382096  1110088269 -2090046918]]";

        String inverseTest1 = "[[14 17 20 23  2  5  8 11]\n" +
                " [15 18 21 24  3  6  9 12]\n" +
                " [13 16 19 22  1  4  7 10]]";
        String inverseTest2 = "[[  302146772  1680577391  1492266146  -395847056  1002368981  1363149884\n" +
                "   1386221280 -2093798834 -1870995205  1404566300  -969539934   220237701\n" +
                "   1295517044  1063208819 -1185386011  1061471654  1845451069  1366918368\n" +
                "  -1618880412  -106061052    65904553  -641801733   479533694  1322684407\n" +
                "  -1737441018   639951492  -399726708  -191625668  1756299988]\n" +
                " [-1109368287 -1194005631  -233722064  -699760053 -1304428038 -1482184442\n" +
                "  -1715165091  1077539599   680700362   245309477    38758360  -431324300\n" +
                "   2112768381  1993250598 -1982460855   163546000 -1537863011    78055491\n" +
                "   -889589116  1373722194 -1954958920  -763797550 -1592528111  -437107622\n" +
                "   -735309092    19021195  -380134168  1691823464 -1276363988]\n" +
                " [ -227153159  1391605248   884769484  1474838811  1615037067  -235328511\n" +
                "   1126184039   -59208303  1078693155  -653664751   424197738   707503773\n" +
                "  -1812293272   990128266  1051638875  1262114770   878152025   323086399\n" +
                "  -1636706339 -1468299950   995741027   351456039   170687562 -1708193890\n" +
                "   1016171266 -1244617752   748004111 -1829970473   -86780702]\n" +
                " [ 1478483728  2060122261  1403070732  -519730159   889449109 -2059132533\n" +
                "    318410111  1836716993 -1862025839   933182928  1433012157  -639942687\n" +
                "   1215347796  1910478608   118381758   387445740  1476867902  -861217626\n" +
                "   -425097539 -1642917977  1109215762   805127749  1550532480 -1088205868\n" +
                "    524004471  1736231404  -951275079 -1330009605 -1055917838]\n" +
                " [-1182625997 -1825460026  -827586155   693395366  -735834946   414738065\n" +
                "   -888035816 -1816535314  1989194642  -787565480  -702071924 -1427149786\n" +
                "    293721390    89695749  -891700184 -1701418990  1284043180   342489946\n" +
                "  -1288735502  1526479568  -484142492 -1229040549 -1962117787  1925695942\n" +
                "   1002026254  -774439474  1661978397   -65435811  1736262146]\n" +
                " [ 1249633991  1508106432 -1665537197  1424438066 -1565771926 -1666793157\n" +
                "   1952698391   133412858   331390456  -755600649  2118068949 -1850144503\n" +
                "     79644332  -406328749  1305216010  -385185809   444888615  1191170612\n" +
                "   1948339593  2078903430  1656202263   887565079  1542328774  -753056948\n" +
                "  -1387940139 -1315931750  1123020225  -912798078   227799270]\n" +
                " [ -147998167 -1842737204   360996351 -2077314434  1395425127  1440682905\n" +
                "    142071603  1521330436 -1764940450    -7882275 -1052106165  1732247645\n" +
                "   1374160936  1341791775 -1459510737   283885184  -902917666   -82143137\n" +
                "   1982385051  1593119868 -2094523321   129550304  1679463098  2017938932\n" +
                "   1605773003  1967410659  1914619427   449254025  2017333087]\n" +
                " [-1910406724  -412224975  1003497156  1512686020  -444554710 -1712740118\n" +
                "    315509660   152232600  -464135314 -1030336922 -1265853804 -1187168949\n" +
                "   -880870930  1335152244  -320774023  1736691934  2012494037  1293362720\n" +
                "  -1287234249   948065906  2102350646   988611868  1857222948  1752723320\n" +
                "   1036803320   560475984  -509279660   393061868  -194444813]\n" +
                " [  403917392  1171635012   499930893 -1534720577   896348514  1045927497\n" +
                "   1135497372 -1839227006  1960104219  1408603220 -2030845556  -869947170\n" +
                "   1415913323    65860039   533883087  1717778097 -1235293084  -877108154\n" +
                "   2016233762    87259698  2066230498     4122911   461019676   511461787\n" +
                "    360068630  1244846667   629339017  1947956787  1890748623]\n" +
                " [ 1591528192 -2138310790   964565247  1757655055  1476798941  2032502678\n" +
                "    615096436  -567028540  -852997769   393404314 -1973030243   775912890\n" +
                "   1107208365   565984170  1683770163 -1044954292    14052556   -38628400\n" +
                "   -406087435   691515831 -1365460550 -1265392950 -1309422400   896897923\n" +
                "   1653698402 -1445271836   222720247 -2107880496 -1414303847]\n" +
                " [ -280915279 -1537247342  -374315851  -230228891   797694132   221765032\n" +
                "    260043194    10279100  -593419784 -1084857309   -23571202  -891645995\n" +
                "   1764064165   606571076   470682094 -1117766677  -493780188   718493138\n" +
                "   -496561728  1809277309  -605933717   826004318   577887840 -2130173645\n" +
                "    545045343   131904360  1976469195   303018278  -597923119]\n" +
                " [-1841285246  -192207979  1833957355  1156205617  1910124196 -1133749943\n" +
                "    242250305 -1381292599  2043107474 -1965817479  -912272660 -1776613222\n" +
                "    276113173   597860025  1028463852  1374308528  1319453786  1422448052\n" +
                "  -1301968498   371853108  -214186435  -220830448  2087535789  -856298414\n" +
                "  -2076123566  1646306983  -293565095  2127811689 -1151777520]]";
//        printJavaArrayA(convertToJavaArray(inverseTest2));
    }

    // Function to generate a random 2D array
    private static int[][] generateRandom2DArray(int rows, int columns) {
        Random random = new Random();
        int[][] randomArray = new int[rows][columns];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                // Generate a random double between 0.0 and 1.0 (exclusive)
                randomArray[i][j] = random.nextInt();
            }
        }

        return randomArray;
    }

    // Function to print the array in Python array format
    public static void printPythonArray(int[][] array) {
        System.out.print("[");
        for (int i = 0; i < array.length; i++) {
            System.out.print("[");
            for (int j = 0; j < array[i].length; j++) {
                System.out.print(array[i][j]);
                if (j < array[i].length - 1) {
                    System.out.print(", ");
                }
            }
            System.out.print("]");
            if (i < array.length - 1) {
                System.out.print(", ");
            }
            System.out.println();
        }
        System.out.println("]");
    }
    public static int[][] convertToJavaArray(String pythonArray) {
        String[] rowStrings = pythonArray.substring(2, pythonArray.length() - 2).split("\\]\\s*\n\\s*\\[");

        // Initialize the 2D array in Java
        int[][] javaArray = new int[rowStrings.length][];

        // Iterate over the row strings
        for (int i = 0; i < rowStrings.length; i++) {
            // Remove leading and trailing spaces and split the row string into individual number strings
            String[] numberStrings = rowStrings[i].trim().split("\\s+");

            // Initialize the current row in the Java array
            javaArray[i] = new int[numberStrings.length];

            // Iterate over the number strings
            for (int j = 0; j < numberStrings.length; j++) {
                // Convert the number string into an integer and store it in the Java array
                javaArray[i][j] = Integer.parseInt(numberStrings[j]);
            }
        }

        return javaArray;
    }
    private static void printJavaArrayA(int[][] array) {
        System.out.print("{");
        for (int i = 0; i < array.length; i++) {
            System.out.print("{");
            for (int j = 0; j < array[i].length; j++) {
                System.out.print(array[i][j]);
                if (j < array[i].length - 1) {
                    System.out.print(", ");
                }
            }
            System.out.print("}");
            if (i < array.length - 1) {
                System.out.print(", ");
            }
            System.out.println();
        }
        System.out.println("}");
    }
}

