/*-
 * #%L
 * Double Helix PSF SMLM analysis tool.
 * %%
 * Copyright (C) 2023 Laue Lab
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */
/*
 * Copyright (C) 2023 GDSC
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

package uk.ac.cam.dhpsfu.analysis;

import org.apache.commons.math3.complex.Complex;
import org.checkerframework.checker.units.qual.C;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import uk.ac.cam.dhpsfu.plugins.DriftCorrection;
import uk.ac.sussex.gdsc.smlm.data.config.UnitProtos.DistanceUnit;
import uk.ac.sussex.gdsc.smlm.data.config.UnitProtos.IntensityUnit;
import uk.ac.sussex.gdsc.smlm.results.MemoryPeakResults;
import uk.ac.sussex.gdsc.smlm.results.procedures.StandardResultProcedure;

import java.util.ArrayList;
import java.util.Arrays;

/**
 * Demonstrate using the JUnit 5 test framework to assert expected results.
 */
class LocalisationsTest {

  /**
   * Test the created random localisations are calibrated in pixels and photons.
   * An object is used to obtain all the results in non-native units. The test
   * then accesses all the native data using the forEach method of the results and checks
   * the conversion.
   *
   * <p>Note there are many {@code forEach} method to obtain data in the {@link MemoryPeakResults}.
   * The {@link StandardResultProcedure} provides commonly used options to get data into
   * arrays.
   */
  @Test
  void canCreateRandomResults() {
    MemoryPeakResults results = Localisations.createRandomResults("Test");
    Assertions.assertEquals(DistanceUnit.PIXEL, results.getDistanceUnit(), "distance unit");
    Assertions.assertEquals(IntensityUnit.PHOTON, results.getIntensityUnit(), "intensity unit");

    // Check the calibration allows unit conversion
    double gain = results.getGain();
    double nmPerPixel = results.getNmPerPixel();
    Assertions.assertNotEquals(1, gain, "gain == 1");
    Assertions.assertNotEquals(1, nmPerPixel, "nm/pixel == 1");

    // Use a procedure to obtain the results in (different) desired units
    StandardResultProcedure p = new StandardResultProcedure(results, DistanceUnit.NM, IntensityUnit.COUNT);
    // This method will obtain the {Background, Intensity, X, Y, Z} in the configured
    // units and save them in arrays
    p.getBixyz();

    // Here we check scaling was done correctly: px to nm; and photons to counts

    // The consumer used in the forEach method does not know the current index, so
    // we maintain it in an array that can be updated within the consumer.
    int[] index = {0};
    results.forEachNative((b, i, x, y, z) -> {
      int j = index[0]++;
      Assertions.assertEquals((float) (b * gain), p.background[j]);
      Assertions.assertEquals((float) (i * gain), p.intensity[j]);
      Assertions.assertEquals((float) (x * nmPerPixel), p.x[j]);
      Assertions.assertEquals((float) (y * nmPerPixel), p.y[j]);
      Assertions.assertEquals((float) (z * nmPerPixel), p.z[j]);
    });
  }

  @Test
  void fftTest1(){
    int[][] testArray = {{-952145419, 1150919348, 2098125113, 1996100329, 1082906509, -2124077112, 1803455204, 1522235545},
      {996418127, -841333635, -1436985463, -28593440, -1127956021, -1458466025, 1941657221, -1146736359},
      {745298877, -513881224, -1544853229, 461747974, 922824646, -554477882, -462852314, 2035766041},
      {-462091682, -1985742517, 1844082041, -9440018, 1505817352, 340047517, -1230950173, -2077857764},
      {2029062600, -1986243586, 692214511, 306951981, -452180014, 1797463301, -1608924245, -2036843798},
      {267065219, 248958589, -8508224, -1203512869, 1372256148, -643314804, 1765753283, -245089267},
      {2090638732, -2052980457, 814367177, -468453611, 2062371702, -2009719963, -663278016, -401476011}
    };
    int[][] resultArray = {{-452180014, 1797463301, -1608924245, -2036843798, 2029062600, -1986243586, 692214511, 306951981},
            {1372256148, -643314804, 1765753283, -245089267, 267065219, 248958589, -8508224, -1203512869},
            {2062371702, -2009719963, -663278016, -401476011, 2090638732, -2052980457, 814367177, -468453611},
            {1082906509, -2124077112, 1803455204, 1522235545, -952145419, 1150919348, 2098125113, 1996100329},
            {-1127956021, -1458466025, 1941657221, -1146736359, 996418127, -841333635, -1436985463, -28593440},
            {922824646, -554477882, -462852314, 2035766041, 745298877, -513881224, -1544853229, 461747974},
            {1505817352, 340047517, -1230950173, -2077857764, -462091682, -1985742517, 1844082041, -9440018}
    };
    Assertions.assertArrayEquals(resultArray,Fftshift.fftShift2D(testArray));

  }

  @Test
  void fftTest2(){
    int[][] testArray = {{1954831722, 1815781558, -1777907134, -899176762, -1410510206, -1138597205, 145030320, 556049948, -1939102269, -729101689, -1226405578, -2126809518, 1146339456, -1860694065, -1759914334, 1462075763, 541769896, 2006626829, -850593196, -1307704057, -806175160, 1234020872, 1915609960, -503297951, 836199763, 581564980, -292088806, -2121112523, 887351205},
            {54415979, -1578889882, -1816367251, 179800901, 1420868317, -38907665, -1724570308, -272738070, -1568966075, -801235679, 883578994, -129519936, 2035657565, 503859097, -474167278, 1697430379, -464833133, 1279580611, 286009633, 188032332, 193928445, 20992964, -82216512, -427269630, -166830711, -1396459109, -1718423171, 1532920370, -1132935816},
            {839765634, 1610490597, 1057715595, -1378319604, 1603936922, -555081123, 749472516, 36198783, 1436079814, 1293731377, -9686680, -102518473, 1824799446, -1110748179, 1976712211, 1636497208, -1167087128, -1725944085, -437047299, -1060503590, -1233303286, 106191917, -1238344457, 1570070715, 1922993188, -1547899028, -1319188683, 930018806, 169714964},
            {-963005072, -1136843508, 894502548, -1532215014, -1150046302, 1696953595, -1530741694, 1737898102, 632239327, -97292305, -2121276860, -1250094000, -1025586290, -2048304190, -1496768599, -5533993, -375320332, 1257308676, 1381048512, 1801351595, 497369542, 489606910, 1334731722, -1957529985, -669566977, -1791402765, -1558143760, 817696250, 376238580},
            {1671950249, -604773001, -925880098, -1633880411, -1882282969, -587519439, 726114155, 6695765, -911779649, 1501465910, 494940933, -725160357, 85102926, -1551782188, -226482668, 1347062586, -1249125438, 1267798467, -1788774869, -139371537, 1495365852, 1518669469, 1325253739, -907465846, -1204335306, 1136396940, -1144170455, -208622080, -1046913401},
            {-1472928444, -1847515186, -1466293954, 669147430, 1812845108, 318376959, -313627775, -1837164084, -1216671497, -1036156675, 1513310948, 165648285, 898382096, 1110088269, -2090046918, 1072925289, 625872086, 343411867, -44536034, -199280338, -1203632211, 1823371738, -1431808697, 950721761, 1392778102, -572511312, 1430301472, 394683245, -712355512},
            {-2045605871, -1608940649, -1990729989, 1324433759, 2097286185, 1313550644, -194304652, -662464940, -500823681, 667098734, 1300063299, -1545990258, 2104877399, 2147309369, 1388817503, 601143032, -1313564073, 1943312355, 1314372232, 654654964, -1808946068, 1380185376, -134840368, 1999484302, -1760024850, -1642958493, -724554148, 1274418676, -276589311},
            {-1928195218, 1007275628, 2049853734, 279615, -1843310036, -1616076904, -1676038935, -1131753069, 582412734, 286247515, -2053357567, 2083332199, -1532138029, 594355669, -1343164770, -1318772735, -159044292, 1188435404, 387166742, -626261206, -660063553, -1249262349, 1853978580, -492909040, 983936810, -704757905, -157613168, 1917017709, 18249899},
            {151138710, 1729577152, 668160487, -1053865121, -982167815, -658196659, -1696305479, -2094495960, 1852941732, -794749047, -635669869, 1172186818, -845127261, 860426593, 152595391, 2039942168, -1642543928, 422701774, -988938108, 1191460308, 886068908, 222398865, 1848592591, 1602087476, 1854902514, -143596513, -1186980338, 2106409764, -2133947438},
            {-814740007, 2052457823, 909084552, -1089376555, -1627237761, 1302992874, 1697631704, -2120963619, 2084312294, 536251786, 1320838130, 143997544, 271803625, 55561650, -1893345238, -377388779, 1112506525, -1039979890, 2098921382, 2099473254, 2054337736, 755214952, -1425633815, 530380230, 268259474, -921730227, -2141974100, 1495026126, 1348444285},
            {-1287705361, 1251699444, 951909571, -1461967726, -178705203, -672723360, 241185379, -75860516, 173277329, 1724557763, 211658720, -1036087526, -1507734856, 342294002, 1032579884, 348089519, 2004329847, -1796144674, 742277751, -697092131, 956088285, -299916572, 96143349, -1497992910, 258713908, -1388005789, 387284452, -1309225407, -1779274067},
            {302706831, 260202189, 1153547925, -1346080965, 1545335940, 1827581449, 956419042, -140834370, -1567698530, -602633082, -1296742018, -1844410012, -1188003321, 42079691, -2028206322, 9630796, -558023024, 1304594745, 1862335108, -27090837, -1992639548, -1357233261, 1436554568, 971682483, 1074832442, 323636415, -1325942603, 285207665, 1065215019}
    };
    int[][] resultArray = {{601143032, -1313564073, 1943312355, 1314372232, 654654964, -1808946068, 1380185376, -134840368, 1999484302, -1760024850, -1642958493, -724554148, 1274418676, -276589311, -2045605871, -1608940649, -1990729989, 1324433759, 2097286185, 1313550644, -194304652, -662464940, -500823681, 667098734, 1300063299, -1545990258, 2104877399, 2147309369, 1388817503},
            {-1318772735, -159044292, 1188435404, 387166742, -626261206, -660063553, -1249262349, 1853978580, -492909040, 983936810, -704757905, -157613168, 1917017709, 18249899, -1928195218, 1007275628, 2049853734, 279615, -1843310036, -1616076904, -1676038935, -1131753069, 582412734, 286247515, -2053357567, 2083332199, -1532138029, 594355669, -1343164770},
            {2039942168, -1642543928, 422701774, -988938108, 1191460308, 886068908, 222398865, 1848592591, 1602087476, 1854902514, -143596513, -1186980338, 2106409764, -2133947438, 151138710, 1729577152, 668160487, -1053865121, -982167815, -658196659, -1696305479, -2094495960, 1852941732, -794749047, -635669869, 1172186818, -845127261, 860426593, 152595391},
            {-377388779, 1112506525, -1039979890, 2098921382, 2099473254, 2054337736, 755214952, -1425633815, 530380230, 268259474, -921730227, -2141974100, 1495026126, 1348444285, -814740007, 2052457823, 909084552, -1089376555, -1627237761, 1302992874, 1697631704, -2120963619, 2084312294, 536251786, 1320838130, 143997544, 271803625, 55561650, -1893345238},
            {348089519, 2004329847, -1796144674, 742277751, -697092131, 956088285, -299916572, 96143349, -1497992910, 258713908, -1388005789, 387284452, -1309225407, -1779274067, -1287705361, 1251699444, 951909571, -1461967726, -178705203, -672723360, 241185379, -75860516, 173277329, 1724557763, 211658720, -1036087526, -1507734856, 342294002, 1032579884},
            {9630796, -558023024, 1304594745, 1862335108, -27090837, -1992639548, -1357233261, 1436554568, 971682483, 1074832442, 323636415, -1325942603, 285207665, 1065215019, 302706831, 260202189, 1153547925, -1346080965, 1545335940, 1827581449, 956419042, -140834370, -1567698530, -602633082, -1296742018, -1844410012, -1188003321, 42079691, -2028206322},
            {1462075763, 541769896, 2006626829, -850593196, -1307704057, -806175160, 1234020872, 1915609960, -503297951, 836199763, 581564980, -292088806, -2121112523, 887351205, 1954831722, 1815781558, -1777907134, -899176762, -1410510206, -1138597205, 145030320, 556049948, -1939102269, -729101689, -1226405578, -2126809518, 1146339456, -1860694065, -1759914334},
            {1697430379, -464833133, 1279580611, 286009633, 188032332, 193928445, 20992964, -82216512, -427269630, -166830711, -1396459109, -1718423171, 1532920370, -1132935816, 54415979, -1578889882, -1816367251, 179800901, 1420868317, -38907665, -1724570308, -272738070, -1568966075, -801235679, 883578994, -129519936, 2035657565, 503859097, -474167278},
            {1636497208, -1167087128, -1725944085, -437047299, -1060503590, -1233303286, 106191917, -1238344457, 1570070715, 1922993188, -1547899028, -1319188683, 930018806, 169714964, 839765634, 1610490597, 1057715595, -1378319604, 1603936922, -555081123, 749472516, 36198783, 1436079814, 1293731377, -9686680, -102518473, 1824799446, -1110748179, 1976712211},
            {-5533993, -375320332, 1257308676, 1381048512, 1801351595, 497369542, 489606910, 1334731722, -1957529985, -669566977, -1791402765, -1558143760, 817696250, 376238580, -963005072, -1136843508, 894502548, -1532215014, -1150046302, 1696953595, -1530741694, 1737898102, 632239327, -97292305, -2121276860, -1250094000, -1025586290, -2048304190, -1496768599},
            {1347062586, -1249125438, 1267798467, -1788774869, -139371537, 1495365852, 1518669469, 1325253739, -907465846, -1204335306, 1136396940, -1144170455, -208622080, -1046913401, 1671950249, -604773001, -925880098, -1633880411, -1882282969, -587519439, 726114155, 6695765, -911779649, 1501465910, 494940933, -725160357, 85102926, -1551782188, -226482668},
            {1072925289, 625872086, 343411867, -44536034, -199280338, -1203632211, 1823371738, -1431808697, 950721761, 1392778102, -572511312, 1430301472, 394683245, -712355512, -1472928444, -1847515186, -1466293954, 669147430, 1812845108, 318376959, -313627775, -1837164084, -1216671497, -1036156675, 1513310948, 165648285, 898382096, 1110088269, -2090046918}
    };
    Assertions.assertArrayEquals(resultArray,Fftshift.fftShift2D(testArray));

  }
  @Test
  void ifftTest(){
    int[][] testArray = {
            {1,4,7,10,13,16,19,22},
            {2,5,8,11,14,17,20,23},
            {3,6,9,12,15,18,21,24}
    };
    int[][] resultArray = {{14, 17, 20, 23, 2, 5, 8, 11},
            {15, 18, 21, 24, 3, 6, 9, 12},
            {13, 16, 19, 22, 1, 4, 7, 10}
    };
    Assertions.assertArrayEquals(resultArray,Fftshift.ifftShift2D(testArray));
  }

  @Test
  void ifftTest2(){
    int[][] testArray = {{283885184, -902917666, -82143137, 1982385051, 1593119868, -2094523321, 129550304, 1679463098, 2017938932, 1605773003, 1967410659, 1914619427, 449254025, 2017333087, -147998167, -1842737204, 360996351, -2077314434, 1395425127, 1440682905, 142071603, 1521330436, -1764940450, -7882275, -1052106165, 1732247645, 1374160936, 1341791775, -1459510737},
            {1736691934, 2012494037, 1293362720, -1287234249, 948065906, 2102350646, 988611868, 1857222948, 1752723320, 1036803320, 560475984, -509279660, 393061868, -194444813, -1910406724, -412224975, 1003497156, 1512686020, -444554710, -1712740118, 315509660, 152232600, -464135314, -1030336922, -1265853804, -1187168949, -880870930, 1335152244, -320774023},
            {1717778097, -1235293084, -877108154, 2016233762, 87259698, 2066230498, 4122911, 461019676, 511461787, 360068630, 1244846667, 629339017, 1947956787, 1890748623, 403917392, 1171635012, 499930893, -1534720577, 896348514, 1045927497, 1135497372, -1839227006, 1960104219, 1408603220, -2030845556, -869947170, 1415913323, 65860039, 533883087},
            {-1044954292, 14052556, -38628400, -406087435, 691515831, -1365460550, -1265392950, -1309422400, 896897923, 1653698402, -1445271836, 222720247, -2107880496, -1414303847, 1591528192, -2138310790, 964565247, 1757655055, 1476798941, 2032502678, 615096436, -567028540, -852997769, 393404314, -1973030243, 775912890, 1107208365, 565984170, 1683770163},
            {-1117766677, -493780188, 718493138, -496561728, 1809277309, -605933717, 826004318, 577887840, -2130173645, 545045343, 131904360, 1976469195, 303018278, -597923119, -280915279, -1537247342, -374315851, -230228891, 797694132, 221765032, 260043194, 10279100, -593419784, -1084857309, -23571202, -891645995, 1764064165, 606571076, 470682094},
            {1374308528, 1319453786, 1422448052, -1301968498, 371853108, -214186435, -220830448, 2087535789, -856298414, -2076123566, 1646306983, -293565095, 2127811689, -1151777520, -1841285246, -192207979, 1833957355, 1156205617, 1910124196, -1133749943, 242250305, -1381292599, 2043107474, -1965817479, -912272660, -1776613222, 276113173, 597860025, 1028463852},
            {1061471654, 1845451069, 1366918368, -1618880412, -106061052, 65904553, -641801733, 479533694, 1322684407, -1737441018, 639951492, -399726708, -191625668, 1756299988, 302146772, 1680577391, 1492266146, -395847056, 1002368981, 1363149884, 1386221280, -2093798834, -1870995205, 1404566300, -969539934, 220237701, 1295517044, 1063208819, -1185386011},
            {163546000, -1537863011, 78055491, -889589116, 1373722194, -1954958920, -763797550, -1592528111, -437107622, -735309092, 19021195, -380134168, 1691823464, -1276363988, -1109368287, -1194005631, -233722064, -699760053, -1304428038, -1482184442, -1715165091, 1077539599, 680700362, 245309477, 38758360, -431324300, 2112768381, 1993250598, -1982460855},
            {1262114770, 878152025, 323086399, -1636706339, -1468299950, 995741027, 351456039, 170687562, -1708193890, 1016171266, -1244617752, 748004111, -1829970473, -86780702, -227153159, 1391605248, 884769484, 1474838811, 1615037067, -235328511, 1126184039, -59208303, 1078693155, -653664751, 424197738, 707503773, -1812293272, 990128266, 1051638875},
            {387445740, 1476867902, -861217626, -425097539, -1642917977, 1109215762, 805127749, 1550532480, -1088205868, 524004471, 1736231404, -951275079, -1330009605, -1055917838, 1478483728, 2060122261, 1403070732, -519730159, 889449109, -2059132533, 318410111, 1836716993, -1862025839, 933182928, 1433012157, -639942687, 1215347796, 1910478608, 118381758},
            {-1701418990, 1284043180, 342489946, -1288735502, 1526479568, -484142492, -1229040549, -1962117787, 1925695942, 1002026254, -774439474, 1661978397, -65435811, 1736262146, -1182625997, -1825460026, -827586155, 693395366, -735834946, 414738065, -888035816, -1816535314, 1989194642, -787565480, -702071924, -1427149786, 293721390, 89695749, -891700184},
            {-385185809, 444888615, 1191170612, 1948339593, 2078903430, 1656202263, 887565079, 1542328774, -753056948, -1387940139, -1315931750, 1123020225, -912798078, 227799270, 1249633991, 1508106432, -1665537197, 1424438066, -1565771926, -1666793157, 1952698391, 133412858, 331390456, -755600649, 2118068949, -1850144503, 79644332, -406328749, 1305216010}
    };
    int[][] resultArray = {{302146772, 1680577391, 1492266146, -395847056, 1002368981, 1363149884, 1386221280, -2093798834, -1870995205, 1404566300, -969539934, 220237701, 1295517044, 1063208819, -1185386011, 1061471654, 1845451069, 1366918368, -1618880412, -106061052, 65904553, -641801733, 479533694, 1322684407, -1737441018, 639951492, -399726708, -191625668, 1756299988},
            {-1109368287, -1194005631, -233722064, -699760053, -1304428038, -1482184442, -1715165091, 1077539599, 680700362, 245309477, 38758360, -431324300, 2112768381, 1993250598, -1982460855, 163546000, -1537863011, 78055491, -889589116, 1373722194, -1954958920, -763797550, -1592528111, -437107622, -735309092, 19021195, -380134168, 1691823464, -1276363988},
            {-227153159, 1391605248, 884769484, 1474838811, 1615037067, -235328511, 1126184039, -59208303, 1078693155, -653664751, 424197738, 707503773, -1812293272, 990128266, 1051638875, 1262114770, 878152025, 323086399, -1636706339, -1468299950, 995741027, 351456039, 170687562, -1708193890, 1016171266, -1244617752, 748004111, -1829970473, -86780702},
            {1478483728, 2060122261, 1403070732, -519730159, 889449109, -2059132533, 318410111, 1836716993, -1862025839, 933182928, 1433012157, -639942687, 1215347796, 1910478608, 118381758, 387445740, 1476867902, -861217626, -425097539, -1642917977, 1109215762, 805127749, 1550532480, -1088205868, 524004471, 1736231404, -951275079, -1330009605, -1055917838},
            {-1182625997, -1825460026, -827586155, 693395366, -735834946, 414738065, -888035816, -1816535314, 1989194642, -787565480, -702071924, -1427149786, 293721390, 89695749, -891700184, -1701418990, 1284043180, 342489946, -1288735502, 1526479568, -484142492, -1229040549, -1962117787, 1925695942, 1002026254, -774439474, 1661978397, -65435811, 1736262146},
            {1249633991, 1508106432, -1665537197, 1424438066, -1565771926, -1666793157, 1952698391, 133412858, 331390456, -755600649, 2118068949, -1850144503, 79644332, -406328749, 1305216010, -385185809, 444888615, 1191170612, 1948339593, 2078903430, 1656202263, 887565079, 1542328774, -753056948, -1387940139, -1315931750, 1123020225, -912798078, 227799270},
            {-147998167, -1842737204, 360996351, -2077314434, 1395425127, 1440682905, 142071603, 1521330436, -1764940450, -7882275, -1052106165, 1732247645, 1374160936, 1341791775, -1459510737, 283885184, -902917666, -82143137, 1982385051, 1593119868, -2094523321, 129550304, 1679463098, 2017938932, 1605773003, 1967410659, 1914619427, 449254025, 2017333087},
            {-1910406724, -412224975, 1003497156, 1512686020, -444554710, -1712740118, 315509660, 152232600, -464135314, -1030336922, -1265853804, -1187168949, -880870930, 1335152244, -320774023, 1736691934, 2012494037, 1293362720, -1287234249, 948065906, 2102350646, 988611868, 1857222948, 1752723320, 1036803320, 560475984, -509279660, 393061868, -194444813},
            {403917392, 1171635012, 499930893, -1534720577, 896348514, 1045927497, 1135497372, -1839227006, 1960104219, 1408603220, -2030845556, -869947170, 1415913323, 65860039, 533883087, 1717778097, -1235293084, -877108154, 2016233762, 87259698, 2066230498, 4122911, 461019676, 511461787, 360068630, 1244846667, 629339017, 1947956787, 1890748623},
            {1591528192, -2138310790, 964565247, 1757655055, 1476798941, 2032502678, 615096436, -567028540, -852997769, 393404314, -1973030243, 775912890, 1107208365, 565984170, 1683770163, -1044954292, 14052556, -38628400, -406087435, 691515831, -1365460550, -1265392950, -1309422400, 896897923, 1653698402, -1445271836, 222720247, -2107880496, -1414303847},
            {-280915279, -1537247342, -374315851, -230228891, 797694132, 221765032, 260043194, 10279100, -593419784, -1084857309, -23571202, -891645995, 1764064165, 606571076, 470682094, -1117766677, -493780188, 718493138, -496561728, 1809277309, -605933717, 826004318, 577887840, -2130173645, 545045343, 131904360, 1976469195, 303018278, -597923119},
            {-1841285246, -192207979, 1833957355, 1156205617, 1910124196, -1133749943, 242250305, -1381292599, 2043107474, -1965817479, -912272660, -1776613222, 276113173, 597860025, 1028463852, 1374308528, 1319453786, 1422448052, -1301968498, 371853108, -214186435, -220830448, 2087535789, -856298414, -2076123566, 1646306983, -293565095, 2127811689, -1151777520}
    };
    Assertions.assertArrayEquals(resultArray,Fftshift.ifftShift2D(testArray));
  }
  @Test
  void complexiTTFShift(){
    Complex[][] array = {
            {new Complex(1, 2), new Complex(3, 4), new Complex(5, 6), new Complex(7, 8), new Complex(9, 10)},
            {new Complex(11, 12), new Complex(13, 14), new Complex(15, 16), new Complex(17, 18), new Complex(19, 20)},
            {new Complex(21, 22), new Complex(23, 24), new Complex(25, 26), new Complex(27, 28), new Complex(29, 30)},
            {new Complex(31, 32), new Complex(33, 34), new Complex(35, 36), new Complex(37, 38), new Complex(39, 40)},
            {new Complex(41, 42), new Complex(43, 44), new Complex(45, 46), new Complex(47, 48), new Complex(49, 50)},
            {new Complex(51, 52), new Complex(53, 54), new Complex(55, 56), new Complex(57, 58), new Complex(59, 60)},
            {new Complex(61, 62), new Complex(63, 64), new Complex(65, 66), new Complex(67, 68), new Complex(69, 70)},
            {new Complex(71, 72), new Complex(73, 74), new Complex(75, 76), new Complex(77, 78), new Complex(79, 80)}
    };
    Complex[][] result ={
            {new Complex(45, 46), new Complex(47, 48), new Complex(49, 50), new Complex(41, 42), new Complex(43, 44)},
            {new Complex(55, 56), new Complex(57, 58), new Complex(59, 60), new Complex(51, 52), new Complex(53, 54)},
            {new Complex(65, 66), new Complex(67, 68), new Complex(69, 70), new Complex(61, 62), new Complex(63, 64)},
            {new Complex(75, 76), new Complex(77, 78), new Complex(79, 80), new Complex(71, 72), new Complex(73, 74)},
            {new Complex(5, 6), new Complex(7, 8), new Complex(9, 10), new Complex(1, 2), new Complex(3, 4)},
            {new Complex(15, 16), new Complex(17, 18), new Complex(19, 20), new Complex(11, 12), new Complex(13, 14)},
            {new Complex(25, 26), new Complex(27, 28), new Complex(29, 30), new Complex(21, 22), new Complex(23, 24)},
            {new Complex(35, 36), new Complex(37, 38), new Complex(39, 40), new Complex(31, 32), new Complex(33, 34)}
    };
    Assertions.assertArrayEquals(result,Fftshift.ifftShift2D(array));

  }

  @Test
  void complexTTFShift(){
    Complex[][] array = {
            {new Complex(1, 2), new Complex(3, 4), new Complex(5, 6), new Complex(7, 8), new Complex(9, 10)},
            {new Complex(11, 12), new Complex(13, 14), new Complex(15, 16), new Complex(17, 18), new Complex(19, 20)},
            {new Complex(21, 22), new Complex(23, 24), new Complex(25, 26), new Complex(27, 28), new Complex(29, 30)},
            {new Complex(31, 32), new Complex(33, 34), new Complex(35, 36), new Complex(37, 38), new Complex(39, 40)},
            {new Complex(41, 42), new Complex(43, 44), new Complex(45, 46), new Complex(47, 48), new Complex(49, 50)},
            {new Complex(51, 52), new Complex(53, 54), new Complex(55, 56), new Complex(57, 58), new Complex(59, 60)},
            {new Complex(61, 62), new Complex(63, 64), new Complex(65, 66), new Complex(67, 68), new Complex(69, 70)},
            {new Complex(71, 72), new Complex(73, 74), new Complex(75, 76), new Complex(77, 78), new Complex(79, 80)}
    };
    Complex[][] result ={
            {new Complex(47, 48), new Complex(49, 50), new Complex(41, 42), new Complex(43, 44), new Complex(45, 46)},
            {new Complex(57, 58), new Complex(59, 60), new Complex(51, 52), new Complex(53, 54), new Complex(55, 56)},
            {new Complex(67, 68), new Complex(69, 70), new Complex(61, 62), new Complex(63, 64), new Complex(65, 66)},
            {new Complex(77, 78), new Complex(79, 80), new Complex(71, 72), new Complex(73, 74), new Complex(75, 76)},
            {new Complex(7, 8), new Complex(9, 10), new Complex(1, 2), new Complex(3, 4), new Complex(5, 6)},
            {new Complex(17, 18), new Complex(19, 20), new Complex(11, 12), new Complex(13, 14), new Complex(15, 16)},
            {new Complex(27, 28), new Complex(29, 30), new Complex(21, 22), new Complex(23, 24), new Complex(25, 26)},
            {new Complex(37, 38), new Complex(39, 40), new Complex(31, 32), new Complex(33, 34), new Complex(35, 36)}
    };
    Assertions.assertArrayEquals(result,Fftshift.fftShift2D(array));

  }

  @Test
  void Fftshift1D(){
    int[] array = {0,1,2,3,4};
    int[] result = {2,3,4,0,1};
    Assertions.assertArrayEquals(result,Fftshift.ifftShift1D(array));
  }
  @Test
  void Fftshift1DComplex(){
    Complex[] array = new Complex[] {
            new Complex(0.69586373, 0.29764591), new Complex(0.26301467, 0.81320766),
            new Complex(0.98886109, 0.97368436), new Complex(0.87937988, 0.6176355),
            new Complex(0.62770723, 0.61209572), new Complex(0.09343558, 0.616934),
            new Complex(0.28542943, 0.94374808), new Complex(0.89982463, 0.6818203),
            new Complex(0.96145714, 0.3595079), new Complex(0.43703195, 0.43703195),
            new Complex(0.6976312, 0.6976312), new Complex(0.06022547, 0.06022547),
            new Complex(0.66676672, 0.66676672), new Complex(0.67063787, 0.67063787),
            new Complex(0.21038256, 0.21038256), new Complex(0.1289263, 0.1289263),
            new Complex(0.31542835, 0.31542835), new Complex(0.36371077, 0.36371077),
            new Complex(0.57019677, 0.57019677), new Complex(0.43860151, 0.43860151),
            new Complex(0.98837384, 0.98837384), new Complex(0.10204481, 0.10204481),
            new Complex(0.20887676, 0.20887676), new Complex(0.16130952, 0.16130952),
            new Complex(0.65310833, 0.65310833), new Complex(0.2532916, 0.2532916),
            new Complex(0.46631077, 0.46631077), new Complex(0.24442559, 0.24442559),
            new Complex(0.15896958, 0.15896958), new Complex(0.11037514, 0.11037514),
            new Complex(0.65632959, 0.65632959), new Complex(0.13818295, 0.13818295),
            new Complex(0.19658236, 0.19658236)
    };
    Complex[] result = new Complex[] {
            new Complex(0.31542835, 0.31542835), new Complex(0.36371077, 0.36371077),
            new Complex(0.57019677, 0.57019677), new Complex(0.43860151, 0.43860151),
            new Complex(0.98837384, 0.98837384), new Complex(0.10204481, 0.10204481),
            new Complex(0.20887676, 0.20887676), new Complex(0.16130952, 0.16130952),
            new Complex(0.65310833, 0.65310833), new Complex(0.2532916, 0.2532916),
            new Complex(0.46631077, 0.46631077), new Complex(0.24442559, 0.24442559),
            new Complex(0.15896958, 0.15896958), new Complex(0.11037514, 0.11037514),
            new Complex(0.65632959, 0.65632959), new Complex(0.13818295, 0.13818295),
            new Complex(0.19658236, 0.19658236), new Complex(0.69586373, 0.29764591),
            new Complex(0.26301467, 0.81320766), new Complex(0.98886109, 0.97368436),
            new Complex(0.87937988, 0.6176355), new Complex(0.62770723, 0.61209572),
            new Complex(0.09343558, 0.616934), new Complex(0.28542943, 0.94374808),
            new Complex(0.89982463, 0.6818203), new Complex(0.96145714, 0.3595079),
            new Complex(0.43703195, 0.43703195), new Complex(0.6976312, 0.6976312),
            new Complex(0.06022547, 0.06022547), new Complex(0.66676672, 0.66676672),
            new Complex(0.67063787, 0.67063787), new Complex(0.21038256, 0.21038256),
            new Complex(0.1289263, 0.1289263)
    };

    Assertions.assertArrayEquals(result,Fftshift.ifftShift1D(array));

  }

  @Test
  void FTpadTest(){
    Complex[][] input = new Complex[][] {
            {new Complex(0.65359286, 0.11500694), new Complex(0.95028286, 0.4821914), new Complex(0.87247454, 0.21233268)},
            {new Complex(0.04070962, 0.39719446), new Complex(0.2331322, 0.84174072), new Complex(0.20708234, 0.74246953)},
            {new Complex(0.74212057, 0.63018394), new Complex(0.14313067, 0.37072892), new Complex(0.25657045, 0.43184279)},
            {new Complex(0.48134929, 0.49352937), new Complex(0.44838289, 0.90789627), new Complex(0.12919961, 0.5610517)}
    };
    Complex[][] output = new Complex[][] {
            {new Complex(0.21786429, 0.03833565), new Complex(0.29082485, 0.07077756)},
            {new Complex(0.16044976, 0.16450979), new Complex(0.04306654, 0.18701723)}
    };
    DriftCorrection dc = new DriftCorrection();
    Assertions.assertArrayEquals(output, DriftCorrection.ftPad(input,new int[]{2,2}) );

  }

  @Test
  void DFTUPSTest(){
    Complex[][] array = {
            {new Complex(1, 2), new Complex(2, 3), new Complex(3, 4)},
            {new Complex(4, 5), new Complex(5, 6), new Complex(6, 7)},
            {new Complex(7, 8), new Complex(8, 9), new Complex(9, 10)},
            {new Complex(10, 11), new Complex(11, 12), new Complex(12, 13)},
            {new Complex(13, 14), new Complex(14, 15), new Complex(15, 16)}
    };
    Complex[][] result = {
            {new Complex(120,135)}
    };
    DriftCorrection dc = new DriftCorrection();
    Assertions.assertArrayEquals(result, DriftCorrection.dftups(array,1,1,1,0,0));
  }
  @Test
  void DFTUPSTest1(){
    Complex[][] array = new Complex[][] {
            {new Complex(49.99, -2.68), new Complex(15.14, -0.36), new Complex(47.65, 12.7), new Complex(72.06, 24.38), new Complex(23.07, -7.29)},
            {new Complex(67.12, -21.66), new Complex(79.5, 43.7), new Complex(10.39, -38.83), new Complex(69.55, -13.15), new Complex(72.42, -1.23)},
            {new Complex(75.2, -11.58), new Complex(16.62, 0.34), new Complex(38.64, 7.48), new Complex(75.86, -19.2), new Complex(68.34, -21.42)}
    };
    Complex[][] result = new Complex[][] {
            {new Complex(51.80031844, 7.66988094), new Complex(222.69105541, 26.95607976), new Complex(294.51223022, 37.58140473), new Complex(235.63892211, 42.78987175), new Complex(99.51527543, 44.16901288)},
            {new Complex(208.03644363, -101.74982889), new Complex(505.55908661, -79.9293913), new Complex(638.85251003, -15.49206301), new Complex(546.3186548, 62.44656387), new Complex(300.68358825, 111.46023315)},
            {new Complex(299.45469356, -183.13902099), new Complex(631.817435, -152.32675095), new Complex(781.55, -48.8), new Complex(675.83176486, 69.96646664), new Complex(387.63234998, 135.25182544)},
            {new Complex(283.2794531, -198.41478784), new Complex(542.38841617, -156.36047001), new Complex(655.83495867, -46.75725235), new Complex(563.57762872, 61.83093398), new Complex(319.67726869, 104.41143931)},
            {new Complex(167.07929702, -140.42942835), new Complex(279.11686192, -90.1431265), new Complex(320.53085105, -10.31964438), new Complex(262.08120424, 41.84667204), new Complex(128.61528215, 33.36963419)}
    };
    Assertions.assertArrayEquals(result, DriftCorrection.dftups(array,5,5,3,2,2));
  }

  @Test
  void arangeTest1(){
    int[] result = {0,1,2,3,4,5};
    Assertions.assertArrayEquals(result, DriftCorrection.arange(0,6));
  }
  @Test
  void arangeTest2(){
    double[] result = {2.5, 3.5, 4.5, 5.5, 6.5, 7.5};
    Assertions.assertArrayEquals(result, DriftCorrection.arange(2.5,7.7));
  }
  @Test
  void arangeTest3(){
    double[] result = {-2.5, -1.5, -0.5,  0.5,  1.5,  2.5,  3.5,  4.5,  5.5,  6.5,  7.5};
    Assertions.assertArrayEquals(result, DriftCorrection.arange(-2.5,7.7));
  }

  @Test
  void dftRes1(){

    //usfac = 1
    Complex[][] array1 = {
            { new Complex(3.1, 4.2), new Complex(1.3, 2.7), new Complex(9.0, 0.5), new Complex(5.8, 6.1), new Complex(2.1, 3.6) },
            { new Complex(4.6, 5.3), new Complex(7.2, 8.9), new Complex(1.0, 4.3), new Complex(3.9, 7.7), new Complex(6.1, 5.0) },
            { new Complex(2.3, 8.5), new Complex(5.7, 1.1), new Complex(3.4, 6.2), new Complex(7.8, 4.0), new Complex(1.5, 9.3) }
    };
    Complex[][] array2 = {
            { new Complex(6.1, 7.4), new Complex(2.3, 4.5), new Complex(5.2, 1.7), new Complex(3.8, 8.2), new Complex(4.3, 3.9) },
            { new Complex(8.6, 5.2), new Complex(1.4, 7.8), new Complex(9.1, 0.3), new Complex(5.0, 6.5), new Complex(7.2, 5.7) },
            { new Complex(3.5, 7.9), new Complex(2.8, 0.6), new Complex(1.7, 5.3), new Complex(8.7, 2.0), new Complex(3.4, 6.8) }
    };
    double[] output1 = {0.476081402363959, 0.0623590661775222, 0, 0};
    Complex[][] greg1 = {
            { new Complex(5.62698538, 7.76576046), new Complex(2.01509553, 4.63458628), new Complex(5.08395106, 2.02075274), new Complex(3.28160095, 8.42087259), new Complex(4.04859934, 4.16038982) },
            { new Complex(8.25922718, 5.72583324), new Complex(0.91119329, 7.87208529), new Complex(9.06361676, 0.86651668), new Complex(4.58521024, 6.79895927), new Complex(6.83078903, 6.13761527) },
            { new Complex(3.00087966, 8.1027601), new Complex(2.75716645, 0.77332603), new Complex(1.36640683, 5.39564013), new Complex(8.55845252, 2.53828494), new Complex(2.96962455, 6.9986663) }
    };
    Dftresult r = DriftCorrection.dftregistration(array1,array2,1);
    Assertions.assertArrayEquals(output1, r.getOutput());
    Assertions.assertArrayEquals(greg1, r.getGreg());


  }
  @Test
  void dftRes2(){
    //usfac = 0
    Complex[][] array1 = {
            { new Complex(3.1, 4.2), new Complex(1.3, 2.7), new Complex(9.0, 0.5), new Complex(5.8, 6.1), new Complex(2.1, 3.6) },
            { new Complex(4.6, 5.3), new Complex(7.2, 8.9), new Complex(1.0, 4.3), new Complex(3.9, 7.7), new Complex(6.1, 5.0) },
            { new Complex(2.3, 8.5), new Complex(5.7, 1.1), new Complex(3.4, 6.2), new Complex(7.8, 4.0), new Complex(1.5, 9.3) }
    };
    Complex[][] array2 = {
            { new Complex(6.1, 7.4), new Complex(2.3, 4.5), new Complex(5.2, 1.7), new Complex(3.8, 8.2), new Complex(4.3, 3.9) },
            { new Complex(8.6, 5.2), new Complex(1.4, 7.8), new Complex(9.1, 0.3), new Complex(5.0, 6.5), new Complex(7.2, 5.7) },
            { new Complex(3.5, 7.9), new Complex(2.8, 0.6), new Complex(1.7, 5.3), new Complex(8.7, 2.0), new Complex(3.4, 6.8) }
    };
    double[] output1 = {0.4760814023639589, 0.062359066177522196, 0, 0};
    Complex[][] greg1 = {
            {new Complex(5.62698538, 7.76576046), new Complex(2.01509553, 4.63458628), new Complex(5.08395106, 2.02075274), new Complex(3.28160095, 8.42087259), new Complex(4.04859934, 4.16038982)},
            {new Complex(8.25922718, 5.72583324), new Complex(0.91119329, 7.87208529), new Complex(9.06361676, 0.86651668), new Complex(4.58521024, 6.79895927), new Complex(6.83078903, 6.13761527)},
            {new Complex(3.00087966, 8.1027601), new Complex(2.75716645, 0.77332603), new Complex(1.36640683, 5.39564013), new Complex(8.55845252, 2.53828494), new Complex(2.96962455, 6.9986663)}
    };
    Dftresult r = DriftCorrection.dftregistration(array1,array2,0);
    Assertions.assertArrayEquals(output1, r.getOutput());
    Assertions.assertArrayEquals(greg1, r.getGreg());
  }
  @Test
  void dftRes3(){
    //usfac = 2
    Complex[][] array1 = {
            { new Complex(3.1, 4.2), new Complex(1.3, 2.7), new Complex(9.0, 0.5), new Complex(5.8, 6.1), new Complex(2.1, 3.6) },
            { new Complex(4.6, 5.3), new Complex(7.2, 8.9), new Complex(1.0, 4.3), new Complex(3.9, 7.7), new Complex(6.1, 5.0) },
            { new Complex(2.3, 8.5), new Complex(5.7, 1.1), new Complex(3.4, 6.2), new Complex(7.8, 4.0), new Complex(1.5, 9.3) }
    };
    Complex[][] array2 = {
            { new Complex(6.1, 7.4), new Complex(2.3, 4.5), new Complex(5.2, 1.7), new Complex(3.8, 8.2), new Complex(4.3, 3.9) },
            { new Complex(8.6, 5.2), new Complex(1.4, 7.8), new Complex(9.1, 0.3), new Complex(5.0, 6.5), new Complex(7.2, 5.7) },
            { new Complex(3.5, 7.9), new Complex(2.8, 0.6), new Complex(1.7, 5.3), new Complex(8.7, 2.0), new Complex(3.4, 6.8) }
    };
    double[] output1 = {0.4792252934657974, 0.0, 0.0, 0.0};
    Complex[][] greg1 = {
            {new Complex(6.1, 7.4), new Complex(2.3, 4.5), new Complex(5.2, 1.7), new Complex(3.8, 8.2), new Complex(4.3, 3.9)},
            {new Complex(8.6, 5.2), new Complex(1.4, 7.8), new Complex(9.1, 0.3), new Complex(5.0, 6.5), new Complex(7.2, 5.7)},
            {new Complex(3.5, 7.9), new Complex(2.8, 0.6), new Complex(1.7, 5.3), new Complex(8.7, 2.0), new Complex(3.4, 6.8)}
    };
    Dftresult r = DriftCorrection.dftregistration(array1,array2,2);
    Assertions.assertArrayEquals(output1, r.getOutput());
    Assertions.assertArrayEquals(greg1, r.getGreg());
  }
  @Test
  void dftRes4(){
    //usfac = 3
    Complex[][] array1 = {
            { new Complex(3.1, 4.2), new Complex(1.3, 2.7), new Complex(9.0, 0.5), new Complex(5.8, 6.1), new Complex(2.1, 3.6) },
            { new Complex(4.6, 5.3), new Complex(7.2, 8.9), new Complex(1.0, 4.3), new Complex(3.9, 7.7), new Complex(6.1, 5.0) },
            { new Complex(2.3, 8.5), new Complex(5.7, 1.1), new Complex(3.4, 6.2), new Complex(7.8, 4.0), new Complex(1.5, 9.3) }
    };
    Complex[][] array2 = {
            { new Complex(6.1, 7.4), new Complex(2.3, 4.5), new Complex(5.2, 1.7), new Complex(3.8, 8.2), new Complex(4.3, 3.9) },
            { new Complex(8.6, 5.2), new Complex(1.4, 7.8), new Complex(9.1, 0.3), new Complex(5.0, 6.5), new Complex(7.2, 5.7) },
            { new Complex(3.5, 7.9), new Complex(2.8, 0.6), new Complex(1.7, 5.3), new Complex(8.7, 2.0), new Complex(3.4, 6.8) }
    };
    double[] output1 = {0.476081402363959, 0.06235906617752218, 0,0};
    Complex[][] greg1 = {
            {new Complex(5.62698538, 7.76576046), new Complex(2.01509553, 4.63458628), new Complex(5.08395106, 2.02075274), new Complex(3.28160095, 8.42087259), new Complex(4.04859934, 4.16038982)},
            {new Complex(8.25922718, 5.72583324), new Complex(0.91119329, 7.87208529), new Complex(9.06361676, 0.86651668), new Complex(4.58521024, 6.79895927), new Complex(6.83078903, 6.13761527)},
            {new Complex(3.00087966, 8.1027601), new Complex(2.75716645, 0.77332603), new Complex(1.36640683, 5.39564013), new Complex(8.55845252, 2.53828494), new Complex(2.96962455, 6.9986663)}
    };
    Dftresult r = DriftCorrection.dftregistration(array1,array2,3);
    Assertions.assertArrayEquals(output1, r.getOutput());
    Assertions.assertArrayEquals(greg1, r.getGreg());
  }

  @Test
  void findMean1(){
    ArrayList<Double> al = new ArrayList<>();
    al.add(12.0);
    al.add(45.0);
    al.add(67.1);
    al.add(23.6);
    al.add(33.8);
    al.add(59.4);
    double result = 40.15;
    Assertions.assertEquals(result,DriftCorrection.getMean(al));

  }

  @Test
  void linspaceTest1(){
//    ArrayList<Double> result = new ArrayList<>();
//    result.add(0.0);
//    result.add(0.1);
//    result.add(0.2);
//    result.add(0.3);
//    result.add(0.4);
//    result.add(0.5);
//    result.add(0.6);
//    result.add(0.7);us
//    result.add(0.8);
//    result.add(0.9);
//    result.add(1.0);
    double[] result = new double[]{0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0};

    Assertions.assertArrayEquals(result,DriftCorrection.linspace(0,1,11));

  }

  @Test
  void interpTest1(){
    double[] xp = {0.5, 1.4, 2.2, 3.7, 4.6};
    double[] fp = {3.1, 4.5, 3.9, 5.2, 4.8};
    double[] x = {0.7, 2.5, 4.0, 5.0};

    double[] result = new double[]{3.41111111, 4.16      , 5.06666667, 4.8       };
    Assertions.assertArrayEquals(result,DriftCorrection.interp(x, xp, fp));
  }
  @Test
  void interpTest2(){
    double[] xp = {0.2, 1.3, 2.8, 4.1, 5.5};
    double[] fp = {2.5, 3.8, 2.7, 4.5, 5.2};
    double[] x = {0.5, 3.0, 4.7, 6.0};

    double[] result = new double[]{2.85454545, 2.97692308, 4.8       , 5.2       };
    Assertions.assertArrayEquals(result,DriftCorrection.interp(x, xp, fp));
  }
  @Test
  void interpTest3(){
    double[] xp = {0.7, 1.5, 2.5, 3.5, 4.3};
    double[] fp = {1.2, 2.3, 1.9, 3.5, 2.8};
    double[] x = {1.0, 2.7, 3.9, 5.0};

    double[] result = new double[]{1.6125, 2.22  , 3.15  , 2.8   };
    Assertions.assertArrayEquals(result,DriftCorrection.interp(x, xp, fp));
  }

}
